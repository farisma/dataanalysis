Select *
From PortfolioProject.dbo.NashvilleHousing

--------------------------------------------------------------------------------------------------------------------------

-- Standardize Date Format


Select saleDateConverted, CONVERT(Date,SaleDate)
From PortfolioProject.dbo.NashvilleHousing


Update NashvilleHousing
SET SaleDate = CONVERT(Date,SaleDate)

-- If it doesn't Update properly

ALTER TABLE NashvilleHousing
Add SaleDateConverted Date;

Update NashvilleHousing
SET SaleDateConverted = CONVERT(Date,SaleDate)


 --------------------------------------------------------------------------------------------------------------------------

-- Populate Property Address data

Select *
From PortfolioProject.dbo.NashvilleHousing
--Where PropertyAddress is null
order by ParcelID


-- After checking the table, identified there are some rows with parcel id same and one wont have address and one has
-- so did a join query to check table with itself and check this kind of rows and assign address from the other row with the same parcelid to the empty address column

Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress)
From PortfolioProject.dbo.NashvilleHousing a
JOIN PortfolioProject.dbo.NashvilleHousing b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null


Update a
SET PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
From PortfolioProject.dbo.NashvilleHousing a
JOIN PortfolioProject.dbo.NashvilleHousing b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null


--------------------------------------------------------------------------------------------------------------------------

-- Breaking out Address into Individual Columns (Address, City, State)
-- -1 and +1 below is for avoiding commas from results
select PropertyAddress, 
SUBSTRING(PropertyAddress,1, charindex(',',PropertyAddress)-1) as propertyaddress, 
SUBSTRING(PropertyAddress,charindex(',',PropertyAddress)+1,LEN(PropertyAddress)) as propertycity 
from PortfolioProject..NashvilleHousing

alter table PortfolioProject.dbo.NashvilleHousing
Add PropertySplitAddress nvarchar(255)

update PortfolioProject.dbo.NashvilleHousing
set PropertySplitAddress = SUBSTRING(PropertyAddress,1, charindex(',',PropertyAddress)-1) 

alter table PortfolioProject.dbo.NashvilleHousing
Add PropertyCity nvarchar(255)

update PortfolioProject.dbo.NashvilleHousing
set PropertyCity = SUBSTRING(PropertyAddress,charindex(',',PropertyAddress)+1,LEN(PropertyAddress)) 

select PropertyCity, PropertySplitAddress,
SUBSTRING(PropertyAddress,1, charindex(',',PropertyAddress)-1) as propertyaddress, 
SUBSTRING(PropertyAddress,charindex(',',PropertyAddress)+1,LEN(PropertyAddress)) as propertycity 
from PortfolioProject..NashvilleHousing

-------------------------------------------------------------------------------
-- PARSENAME is another function to separate addresses
-- delimiter in this case should be period .
-- So we need to replace the , with period and apply parsename

select parsename(replace(OwnerAddress,',','.'),3) as firstowneraddress,
parsename(replace(OwnerAddress,',','.'),2) as secondowneraddress,
parsename(replace(OwnerAddress,',','.'),1) as thirdowneraddress,
ownerAddress
from PortfolioProject..NashvilleHousing

alter table PortfolioProject.dbo.NashvilleHousing
Add OwnerSplitAddress nvarchar(255)

alter table PortfolioProject.dbo.NashvilleHousing
Add OwnerSplitCity nvarchar(255)

alter table PortfolioProject.dbo.NashvilleHousing
Add OwnerSplitState nvarchar(255)

update PortfolioProject.dbo.NashvilleHousing
set OwnerSplitAddress = parsename(replace(OwnerAddress,',','.'),3)

update PortfolioProject.dbo.NashvilleHousing
set OwnerSplitCity = parsename(replace(OwnerAddress,',','.'),2)

update PortfolioProject.dbo.NashvilleHousing
set OwnerSplitState = parsename(replace(OwnerAddress,',','.'),1)

select OwnerSplitAddress, OwnerSplitCity, OwnerSplitState, OwnerAddress from PortfolioProject..NashvilleHousing


--------------------------------------------------------------------------------------------------------------------------


-- Change Y and N to Yes and No in "Sold as Vacant" field

select distinct(SoldAsVacant), count(SoldAsVacant) from
PortfolioProject..NashvilleHousing
group by SoldAsVacant

select SoldAsVacant, 
   case 
   when SoldAsVacant = 'Y' then 'Yes'
   when SoldAsVacant = 'N' then 'No'
   else SoldAsVacant 
   end
 from PortfolioProject..NashvilleHousing

update PortfolioProject..NashvilleHousing 
 set SoldAsVacant = case 
   when SoldAsVacant = 'Y' then 'Yes'
   when SoldAsVacant = 'N' then 'No'
   else SoldAsVacant 
   end
 from PortfolioProject..NashvilleHousing

-----------------------------------------------------------------------------------------------------------------------------------------------------------

-- Remove Duplicates
-- this query will fetch duplicate rows based on the uniqueness of columns mentioned in the partition by 
-- rownum that is greater than 1 will be considered as duplicate
select *,row_number() over(
partition by ParcelID,PropertyAddress,SalePrice,SaleDate,LegalReference order by UniqueID
) as rownum from PortfolioProject..NashvilleHousing

with RowNumCTE AS(
select *,row_number() over(
partition by ParcelID,PropertyAddress,SalePrice,SaleDate,LegalReference order by UniqueID
) as rownum from PortfolioProject..NashvilleHousing
)
--to select the duplicate rows
--select * from RowNumCTE where rownum > 1
--delete duplicate rows
delete from RowNumCTE where rownum > 1


select * from PortfolioProject..NashvilleHousing


---------------------------------------------------------------------------------------------------------

-- Delete Unused Columns

alter table PortfolioProject..NashvilleHousing
drop column SaleDate,OwnerAddress,LegalReference, TaxDistrict, PropertyAddress

select *,row_number() over(
partition by ParcelID,SalePrice order by UniqueID
) as rownum from PortfolioProject..NashvilleHousing
